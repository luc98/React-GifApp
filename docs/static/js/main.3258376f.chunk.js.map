{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","list","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAiB9C,OAEQ,sBAAMC,SAZK,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAQV,SACA,uBACQO,KAAK,OACLC,MAAQT,EACRU,SApBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCJlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYbM,GAZa,4CAAH,sDCDPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACQ,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAQ,IAH4B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAXAC,qBAAW,WACPxB,EAAQC,GAAUwB,MAAM,SAAAC,GAChBH,EAAU,CACNf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAIGqB,EDZuBK,CAAc1B,GAA/Ba,EAFsB,EAE5BN,KAAaa,EAFe,EAEfA,QAQpB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAGhD,sBAAKgB,UAAU,YAAf,UACII,GAAW,4CAGHP,EAAOJ,KAAK,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEKA,GADCA,EAAIC,cErBxBgB,EAAe,WAAO,IAAD,EACMzC,mBAAS,CAAC,YADhB,mBACvB0C,EADuB,KACX3C,EADW,KAI9B,OACI,qCACA,0CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEE,6BAEM2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CACAA,SAAWA,GADIA,YCbnC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3258376f.chunk.js","sourcesContent":["import React, {useState}  from 'react';\r\nimport PropTypes from 'prop-types'; \r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n    \r\n    const handleInputCharge = (e) => {\r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n        setCategories(list => [inputValue,...list]);\r\n        setinputValue('');     \r\n    }\r\n   \r\n    \r\n    }\r\n\r\n    return (\r\n\r\n            <form onSubmit= { handleSubmit} >\r\n            <input\r\n                    type=\"text\"\r\n                    value= {inputValue}\r\n                    onChange={ handleInputCharge }\r\n                    />\r\n            </form>\r\n                \r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {    //propTypes sirve para asegurarnos que es lo que nos este mandando sea lo que necesitemos\r\n    setCategories: PropTypes.func.isRequired // para que el valor(mensaje) sea string y obligatorio\r\n}\r\n","\r\n\r\n\r\nexport const getGifs = async (category) =>{\r\n    const url= `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=5LNJvJcXU28ODHwIUmgWyYbcECpksNck`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n   return gifs;\r\n\r\n}\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    //console.log({id,title,url});\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n                <img src={url} alt={title} />\r\n                <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n//, { useState, useEffect }\r\nexport const GifGrid = ({category}) => {\r\n   \r\n    const {data: images,loading}= useFetchGifs( category );\r\n    /*\r\n     useEffect( () => { //para controlar que la peticion se haga cuando la categoria cambie\r\n        getGifs(category)\r\n        .then(imgs => setImages(imgs));\r\n    }, [category] );\r\n    */\r\n  \r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\" >{category}</h3>\r\n        \r\n      \r\n            <div className=\"card-grid\">\r\n               {loading && <p> Loading...</p>} \r\n     \r\n                    {\r\n                        images.map( img =>( \r\n                           <GifGridItem \r\n                            key={img.id}\r\n                           { ...img } \r\n                           />\r\n                        ))\r\n                    }    \r\n            \r\n        </div>\r\n                \r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState({\r\n        data: [] ,\r\n        loading:true\r\n    })\r\n    useEffect( () => {\r\n        getGifs(category).then( imgs =>{\r\n                setstate( {\r\n                    data: imgs,\r\n                    loading: false\r\n            })  \r\n        })\r\n    }, [category])\r\n\r\n\r\n\r\n    return state;\r\n}\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Re Zero']);\r\n \r\n\r\n    return (\r\n        <>\r\n        <h2> Gif-App</h2>\r\n        <AddCategory setCategories={setCategories} />\r\n        <hr/>\r\n    \r\n          <ol>\r\n            {\r\n                categories.map( category => (\r\n                    <GifGrid key={ category }\r\n                    category= {category} />\r\n                     ))\r\n            }\r\n\r\n         </ol>\r\n         </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}